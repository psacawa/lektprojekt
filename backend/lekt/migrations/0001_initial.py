# Generated by Django 3.1.4 on 2021-02-08 19:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Corpus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Parallel corpus name"
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        help_text="Domain of data\n            source, in case of scraping",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="lang_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "lid",
                    models.CharField(
                        help_text='Two-letter identifier used as a key. E.g.: "fr". ',
                        max_length=10,
                        unique=True,
                        verbose_name="Language Id",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='E.g. "French"',
                        max_length=50,
                        unique=True,
                        verbose_name="Printable name",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Phrase",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="phrase_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "text",
                    models.CharField(max_length=500, verbose_name="Raw text of phrase"),
                ),
                (
                    "lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="lekt.language",
                        verbose_name="Language Id",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PhrasePair",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="phrasepair_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="According to need, PhrasePair objects can be marked inactive in the\n        database. This is separate from a soft delete.",
                        verbose_name="Active",
                    ),
                ),
                (
                    "base",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pair_from",
                        to="lekt.phrase",
                        verbose_name="Base language phrase",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        help_text="This is one of a set of sources of examples which \n        are added and tracked manually by administrators.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="lekt.corpus",
                        verbose_name="Source of the data",
                    ),
                ),
                (
                    "target",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pair_to",
                        to="lekt.phrase",
                        verbose_name="Target language phrase",
                    ),
                ),
            ],
            options={
                "unique_together": {("base", "target")},
            },
        ),
        migrations.CreateModel(
            name="Observable",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "observable_id",
                    models.AutoField(
                        db_column="observable_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_lekt.observable_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="Word",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="word_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "norm",
                    models.CharField(
                        help_text='the raw text of the token, computed as Token.norm_, e.g. "hablara"',
                        max_length=50,
                        verbose_name="Normal form",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        help_text="computed as Token.tag_,\n        e.g. VERB__Mood=Ind|Number=Sing|Person=3|Tense=Imp|VerbForm=Fin",
                        max_length=200,
                        verbose_name="Detailed part of speech",
                    ),
                ),
                (
                    "ent_type",
                    models.CharField(
                        help_text='Type of named entity as computed as Token.ent_type_\n        e.g. PER for person for "Sra. Lopez"\n        ',
                        max_length=50,
                        verbose_name="Entity type",
                    ),
                ),
                ("is_oov", models.BooleanField(help_text="computed from Token.is_oov")),
                (
                    "is_stop",
                    models.BooleanField(
                        help_text="Whether the token a stop word, computed from Token.is_stop"
                    ),
                ),
                (
                    "prob",
                    models.FloatField(
                        default=0.0, help_text="computed from Token.prob"
                    ),
                ),
                ("corpus_occurences", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="feature_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "observable_ptr",
                    models.OneToOneField(
                        db_column="observable_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="lekt.observable",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="value of POS/tag as attached by Spacy to the processed token, \n        e.g. Mood=Sub",
                        max_length=20,
                        verbose_name="Feature value",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="these descriptions are generated by spacy.explain but are not\n        universally available",
                        max_length=100,
                        null=True,
                        verbose_name="Human readable description",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("lekt.observable",),
        ),
        migrations.CreateModel(
            name="Lexeme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="lexeme_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "observable_ptr",
                    models.OneToOneField(
                        db_column="observable_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="lekt.observable",
                    ),
                ),
                (
                    "lemma",
                    models.CharField(
                        help_text='the "base" form of the word, computed as Token.lemma_.lower(), \n        e.g. "hablar" ',
                        max_length=50,
                        verbose_name="Token lemma",
                    ),
                ),
                (
                    "pos",
                    models.CharField(
                        help_text="computed as Token.pos_",
                        max_length=50,
                        verbose_name="Part of speech",
                    ),
                ),
            ],
            bases=("lekt.observable",),
        ),
        migrations.CreateModel(
            name="Voice",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="voice_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='E.g. "Lucia"',
                        max_length=50,
                        unique=True,
                        verbose_name="Voice Model Name",
                    ),
                ),
                (
                    "accent",
                    models.CharField(
                        help_text='E.g. "Castilian Spanish"',
                        max_length=50,
                        verbose_name="Region/accent name",
                    ),
                ),
                (
                    "aid",
                    models.CharField(
                        help_text='E.g. "es-ES"',
                        max_length=10,
                        verbose_name="Region code",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")],
                        max_length=10,
                        verbose_name="Voice gender",
                    ),
                ),
                (
                    "lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="lekt.language",
                        verbose_name="Language",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="userprofile_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="User account attached to the profile",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObservableWeight",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("weight", models.FloatField(default=0.0)),
                (
                    "base_lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="+",
                        to="lekt.language",
                    ),
                ),
                (
                    "phrasepair",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observable_weights",
                        to="lekt.phrasepair",
                    ),
                ),
                (
                    "target_lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="+",
                        to="lekt.language",
                    ),
                ),
                (
                    "observable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="lekt.observable",
                    ),
                ),
            ],
            options={
                "db_table": "lekt_observable_weight",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PhraseWord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="phraseword_id", primary_key=True, serialize=False
                    ),
                ),
                ("number", models.IntegerField()),
                ("start", models.IntegerField()),
                ("end", models.IntegerField()),
                (
                    "phrase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lekt.phrase"
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lekt.word"
                    ),
                ),
            ],
            options={
                "db_table": "lekt_phrase_words",
                "ordering": ["number"],
            },
        ),
        migrations.AddField(
            model_name="phrase",
            name="words",
            field=models.ManyToManyField(
                through="lekt.PhraseWord",
                to="lekt.Word",
                verbose_name="Words in the phrase",
            ),
        ),
        migrations.AddField(
            model_name="language",
            name="default_voice",
            field=models.ForeignKey(
                help_text="E.g. Voice=Chantal, Canadian French",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="lekt.voice",
                verbose_name="Default voice",
            ),
        ),
        migrations.AddField(
            model_name="corpus",
            name="languages",
            field=models.ManyToManyField(
                help_text="Two languages associated with\n            the corpus",
                to="lekt.Language",
            ),
        ),
        migrations.CreateModel(
            name="WordFeature",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="phraseword_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lekt.word"
                    ),
                ),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lekt.feature"
                    ),
                ),
            ],
            options={
                "db_table": "lekt_word_features",
            },
        ),
        migrations.AddField(
            model_name="word",
            name="features",
            field=models.ManyToManyField(
                help_text="grammatical features attached to the word",
                through="lekt.WordFeature",
                to="lekt.Feature",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="lexeme",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="lekt.lexeme",
                verbose_name="Lexeme Id",
            ),
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="time of update"),
                ),
                (
                    "id",
                    models.AutoField(
                        db_column="sub_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "base_lang",
                    models.ForeignKey(
                        help_text="Learner's native language",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="lekt.language",
                        verbose_name="Base language",
                    ),
                ),
                (
                    "base_voice",
                    models.ForeignKey(
                        help_text="voice/locale for the learner's base language",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="lekt.voice",
                        verbose_name="Base language voice",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="UserProfile of the account owning the subscription",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lekt.userprofile",
                        verbose_name="Owner's profile",
                    ),
                ),
                (
                    "target_lang",
                    models.ForeignKey(
                        help_text="Learner's target language",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="lekt.language",
                        verbose_name="Target language",
                    ),
                ),
                (
                    "target_voice",
                    models.ForeignKey(
                        help_text="voice/locale for the learner's target language",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="lekt.voice",
                        verbose_name="Target language voice",
                    ),
                ),
            ],
            options={
                "unique_together": {("owner", "base_lang", "target_lang")},
            },
        ),
        migrations.CreateModel(
            name="LexemeWeight",
            fields=[
                (
                    "id",
                    models.AutoField(db_column="id", primary_key=True, serialize=False),
                ),
                ("weight", models.FloatField(default=0.0)),
                (
                    "base_lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="+",
                        to="lekt.language",
                    ),
                ),
                (
                    "phrasepair",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lexeme_weights",
                        to="lekt.phrasepair",
                    ),
                ),
                (
                    "target_lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="+",
                        to="lekt.language",
                    ),
                ),
                (
                    "lexeme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT, to="lekt.lexeme"
                    ),
                ),
            ],
            options={
                "db_table": "lekt_lexeme_weight",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="lexeme",
            name="lang",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="lekt.language",
                verbose_name="Language Id",
            ),
        ),
        migrations.CreateModel(
            name="FeatureWeight",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("weight", models.FloatField(default=0.0)),
                (
                    "base_lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="+",
                        to="lekt.language",
                    ),
                ),
                (
                    "phrasepair",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_weights",
                        to="lekt.phrasepair",
                    ),
                ),
                (
                    "target_lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="+",
                        to="lekt.language",
                    ),
                ),
                (
                    "feature",
                    models.ForeignKey(
                        db_column="feature_id",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="lekt.feature",
                    ),
                ),
            ],
            options={
                "db_table": "lekt_feature_weight",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="feature",
            name="lang",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="lekt.language",
                verbose_name="Language Id",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="word",
            unique_together={
                ("norm", "lexeme", "tag", "ent_type", "is_oov", "is_stop")
            },
        ),
        migrations.AlterUniqueTogether(
            name="lexeme",
            unique_together={("lemma", "pos", "lang")},
        ),
    ]
